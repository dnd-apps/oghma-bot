# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

directive @id(interface: Boolean) on FIELD_DEFINITION

directive @secret(field: String!, pred: String) on OBJECT | INTERFACE

directive @remote on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

directive @lambdaOnMutate(add: Boolean, delete: Boolean, update: Boolean) on OBJECT | INTERFACE

directive @dgraph(pred: String, type: String) on OBJECT | FIELD_DEFINITION | INTERFACE

directive @cascade(fields: [String]) on FIELD

directive @cacheControl(maxAge: Int!) on QUERY

directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION

directive @auth(add: AuthRule, delete: AuthRule, password: AuthRule, query: AuthRule, update: AuthRule) on OBJECT | INTERFACE

directive @custom(dql: String, http: CustomHTTP) on FIELD_DEFINITION

directive @generate(mutation: GenerateMutationParams, query: GenerateQueryParams, subscription: Boolean) on OBJECT | INTERFACE

directive @hasInverse(field: String!) on FIELD_DEFINITION

directive @default(add: DgraphDefault, update: DgraphDefault) on FIELD_DEFINITION

directive @withSubscription on OBJECT | FIELD_DEFINITION | INTERFACE

directive @remoteResponse(name: String) on FIELD_DEFINITION

directive @lambda on FIELD_DEFINITION

type AddDiscordNicknamePayload {
    discordNickname(filter: DiscordNicknameFilter, first: Int, offset: Int, order: DiscordNicknameOrder): [DiscordNickname]
    numUids: Int
}

type AddDiscordUserPayload {
    discordUser(filter: DiscordUserFilter, first: Int, offset: Int, order: DiscordUserOrder): [DiscordUser]
    numUids: Int
}

type AddDiscordVoiceChannelPayload {
    discordVoiceChannel(filter: DiscordVoiceChannelFilter, first: Int, offset: Int, order: DiscordVoiceChannelOrder): [DiscordVoiceChannel]
    numUids: Int
}

type DeleteDiscordNicknamePayload {
    discordNickname(filter: DiscordNicknameFilter, first: Int, offset: Int, order: DiscordNicknameOrder): [DiscordNickname]
    msg: String
    numUids: Int
}

type DeleteDiscordUserPayload {
    discordUser(filter: DiscordUserFilter, first: Int, offset: Int, order: DiscordUserOrder): [DiscordUser]
    msg: String
    numUids: Int
}

type DeleteDiscordVoiceChannelPayload {
    discordVoiceChannel(filter: DiscordVoiceChannelFilter, first: Int, offset: Int, order: DiscordVoiceChannelOrder): [DiscordVoiceChannel]
    msg: String
    numUids: Int
}

type DiscordNickname {
    id: ID!
    nickname: String
    user(filter: DiscordUserFilter): DiscordUser
}

type DiscordNicknameAggregateResult {
    count: Int
    nicknameMax: String
    nicknameMin: String
}

type DiscordUser {
    id: ID!
    name: String
    snowflake: String!
}

type DiscordUserAggregateResult {
    count: Int
    nameMax: String
    nameMin: String
    snowflakeMax: String
    snowflakeMin: String
}

type DiscordVoiceChannel {
    id: ID!
    snowflake: String!
    user_nicknames(filter: DiscordNicknameFilter, first: Int, offset: Int, order: DiscordNicknameOrder): [DiscordNickname!]
    user_nicknamesAggregate(filter: DiscordNicknameFilter): DiscordNicknameAggregateResult
}

type DiscordVoiceChannelAggregateResult {
    count: Int
    snowflakeMax: String
    snowflakeMin: String
}

type MultiPolygon {
    polygons: [Polygon!]!
}

type Mutation {
    addDiscordNickname(input: [AddDiscordNicknameInput!]!): AddDiscordNicknamePayload
    addDiscordUser(input: [AddDiscordUserInput!]!, upsert: Boolean): AddDiscordUserPayload
    addDiscordVoiceChannel(input: [AddDiscordVoiceChannelInput!]!, upsert: Boolean): AddDiscordVoiceChannelPayload
    deleteDiscordNickname(filter: DiscordNicknameFilter!): DeleteDiscordNicknamePayload
    deleteDiscordUser(filter: DiscordUserFilter!): DeleteDiscordUserPayload
    deleteDiscordVoiceChannel(filter: DiscordVoiceChannelFilter!): DeleteDiscordVoiceChannelPayload
    updateDiscordNickname(input: UpdateDiscordNicknameInput!): UpdateDiscordNicknamePayload
    updateDiscordUser(input: UpdateDiscordUserInput!): UpdateDiscordUserPayload
    updateDiscordVoiceChannel(input: UpdateDiscordVoiceChannelInput!): UpdateDiscordVoiceChannelPayload
}

type Point {
    latitude: Float!
    longitude: Float!
}

type PointList {
    points: [Point!]!
}

type Polygon {
    coordinates: [PointList!]!
}

type Query {
    aggregateDiscordNickname(filter: DiscordNicknameFilter): DiscordNicknameAggregateResult
    aggregateDiscordUser(filter: DiscordUserFilter): DiscordUserAggregateResult
    aggregateDiscordVoiceChannel(filter: DiscordVoiceChannelFilter): DiscordVoiceChannelAggregateResult
    getDiscordNickname(id: ID!): DiscordNickname
    getDiscordUser(id: ID, snowflake: String): DiscordUser
    getDiscordVoiceChannel(id: ID, snowflake: String): DiscordVoiceChannel
    queryDiscordNickname(filter: DiscordNicknameFilter, first: Int, offset: Int, order: DiscordNicknameOrder): [DiscordNickname]
    queryDiscordUser(filter: DiscordUserFilter, first: Int, offset: Int, order: DiscordUserOrder): [DiscordUser]
    queryDiscordVoiceChannel(filter: DiscordVoiceChannelFilter, first: Int, offset: Int, order: DiscordVoiceChannelOrder): [DiscordVoiceChannel]
}

type UpdateDiscordNicknamePayload {
    discordNickname(filter: DiscordNicknameFilter, first: Int, offset: Int, order: DiscordNicknameOrder): [DiscordNickname]
    numUids: Int
}

type UpdateDiscordUserPayload {
    discordUser(filter: DiscordUserFilter, first: Int, offset: Int, order: DiscordUserOrder): [DiscordUser]
    numUids: Int
}

type UpdateDiscordVoiceChannelPayload {
    discordVoiceChannel(filter: DiscordVoiceChannelFilter, first: Int, offset: Int, order: DiscordVoiceChannelOrder): [DiscordVoiceChannel]
    numUids: Int
}

enum DgraphIndex {
    bool
    day
    exact
    float
    fulltext
    geo
    hash
    hour
    int
    int64
    month
    regexp
    term
    trigram
    year
}

enum DiscordNicknameHasFilter {
    nickname
    user
}

enum DiscordNicknameOrderable {
    nickname
}

enum DiscordUserHasFilter {
    name
    snowflake
}

enum DiscordUserOrderable {
    name
    snowflake
}

enum DiscordVoiceChannelHasFilter {
    snowflake
    user_nicknames
}

enum DiscordVoiceChannelOrderable {
    snowflake
}

enum HTTPMethod {
    DELETE
    GET
    PATCH
    POST
    PUT
}

enum Mode {
    BATCH
    SINGLE
}

"""

The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime

"""

The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

input AddDiscordNicknameInput {
    nickname: String
    user: DiscordUserRef
}

input AddDiscordUserInput {
    name: String
    snowflake: String!
}

input AddDiscordVoiceChannelInput {
    snowflake: String!
    user_nicknames: [DiscordNicknameRef!]
}

input AuthRule {
    and: [AuthRule]
    not: AuthRule
    or: [AuthRule]
    rule: String
}

input ContainsFilter {
    point: PointRef
    polygon: PolygonRef
}

input CustomHTTP {
    body: String
    forwardHeaders: [String!]
    graphql: String
    introspectionHeaders: [String!]
    method: HTTPMethod!
    mode: Mode
    secretHeaders: [String!]
    skipIntrospection: Boolean
    url: String!
}

input DateTimeFilter {
    between: DateTimeRange
    eq: DateTime
    ge: DateTime
    gt: DateTime
    in: [DateTime]
    le: DateTime
    lt: DateTime
}

input DateTimeRange {
    max: DateTime!
    min: DateTime!
}

input DgraphDefault {
    value: String
}

input DiscordNicknameFilter {
    and: [DiscordNicknameFilter]
    has: [DiscordNicknameHasFilter]
    id: [ID!]
    not: DiscordNicknameFilter
    or: [DiscordNicknameFilter]
}

input DiscordNicknameOrder {
    asc: DiscordNicknameOrderable
    desc: DiscordNicknameOrderable
    then: DiscordNicknameOrder
}

input DiscordNicknamePatch {
    nickname: String
    user: DiscordUserRef
}

input DiscordNicknameRef {
    id: ID
    nickname: String
    user: DiscordUserRef
}

input DiscordUserFilter {
    and: [DiscordUserFilter]
    has: [DiscordUserHasFilter]
    id: [ID!]
    not: DiscordUserFilter
    or: [DiscordUserFilter]
    snowflake: StringHashFilter
}

input DiscordUserOrder {
    asc: DiscordUserOrderable
    desc: DiscordUserOrderable
    then: DiscordUserOrder
}

input DiscordUserPatch {
    name: String
    snowflake: String
}

input DiscordUserRef {
    id: ID
    name: String
    snowflake: String
}

input DiscordVoiceChannelFilter {
    and: [DiscordVoiceChannelFilter]
    has: [DiscordVoiceChannelHasFilter]
    id: [ID!]
    not: DiscordVoiceChannelFilter
    or: [DiscordVoiceChannelFilter]
    snowflake: StringHashFilter
}

input DiscordVoiceChannelOrder {
    asc: DiscordVoiceChannelOrderable
    desc: DiscordVoiceChannelOrderable
    then: DiscordVoiceChannelOrder
}

input DiscordVoiceChannelPatch {
    snowflake: String
    user_nicknames: [DiscordNicknameRef!]
}

input DiscordVoiceChannelRef {
    id: ID
    snowflake: String
    user_nicknames: [DiscordNicknameRef!]
}

input FloatFilter {
    between: FloatRange
    eq: Float
    ge: Float
    gt: Float
    in: [Float]
    le: Float
    lt: Float
}

input FloatRange {
    max: Float!
    min: Float!
}

input GenerateMutationParams {
    add: Boolean
    delete: Boolean
    update: Boolean
}

input GenerateQueryParams {
    aggregate: Boolean
    get: Boolean
    password: Boolean
    query: Boolean
}

input Int64Filter {
    between: Int64Range
    eq: Int64
    ge: Int64
    gt: Int64
    in: [Int64]
    le: Int64
    lt: Int64
}

input Int64Range {
    max: Int64!
    min: Int64!
}

input IntFilter {
    between: IntRange
    eq: Int
    ge: Int
    gt: Int
    in: [Int]
    le: Int
    lt: Int
}

input IntRange {
    max: Int!
    min: Int!
}

input IntersectsFilter {
    multiPolygon: MultiPolygonRef
    polygon: PolygonRef
}

input MultiPolygonRef {
    polygons: [PolygonRef!]!
}

input NearFilter {
    coordinate: PointRef!
    distance: Float!
}

input PointGeoFilter {
    near: NearFilter
    within: WithinFilter
}

input PointListRef {
    points: [PointRef!]!
}

input PointRef {
    latitude: Float!
    longitude: Float!
}

input PolygonGeoFilter {
    contains: ContainsFilter
    intersects: IntersectsFilter
    near: NearFilter
    within: WithinFilter
}

input PolygonRef {
    coordinates: [PointListRef!]!
}

input StringExactFilter {
    between: StringRange
    eq: String
    ge: String
    gt: String
    in: [String]
    le: String
    lt: String
}

input StringFullTextFilter {
    alloftext: String
    anyoftext: String
}

input StringHashFilter {
    eq: String
    in: [String]
}

input StringRange {
    max: String!
    min: String!
}

input StringRegExpFilter {
    regexp: String
}

input StringTermFilter {
    allofterms: String
    anyofterms: String
}

input UpdateDiscordNicknameInput {
    filter: DiscordNicknameFilter!
    remove: DiscordNicknamePatch
    set: DiscordNicknamePatch
}

input UpdateDiscordUserInput {
    filter: DiscordUserFilter!
    remove: DiscordUserPatch
    set: DiscordUserPatch
}

input UpdateDiscordVoiceChannelInput {
    filter: DiscordVoiceChannelFilter!
    remove: DiscordVoiceChannelPatch
    set: DiscordVoiceChannelPatch
}

input WithinFilter {
    polygon: PolygonRef!
}
